// This file was generated by counterfeiter
package fakes

import (
	"github.com/concourse/cf-resource/out"
	"sync"
)

type FakePAAS struct {
	LoginStub        func(api string, username string, password string, insecure bool) error
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		api      string
		username string
		password string
		insecure bool
	}
	loginReturns struct {
		result1 error
	}
	TargetStub        func(organization string, space string) error
	targetMutex       sync.RWMutex
	targetArgsForCall []struct {
		organization string
		space        string
	}
	targetReturns struct {
		result1 error
	}
	PushAppStub        func(manifest string, path string, currentAppName string) error
	pushAppMutex       sync.RWMutex
	pushAppArgsForCall []struct {
		manifest       string
		path           string
		currentAppName string
	}
	pushAppReturns struct {
		result1 error
	}
}

func (fake *FakePAAS) Login(api string, username string, password string, insecure bool) error {
	fake.loginMutex.Lock()
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		api      string
		username string
		password string
		insecure bool
	}{api, username, password, insecure})
	fake.loginMutex.Unlock()
	if fake.LoginStub != nil {
		return fake.LoginStub(api, username, password, insecure)
	} else {
		return fake.loginReturns.result1
	}
}

func (fake *FakePAAS) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakePAAS) LoginArgsForCall(i int) (string, string, string, bool) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return fake.loginArgsForCall[i].api, fake.loginArgsForCall[i].username, fake.loginArgsForCall[i].password, fake.loginArgsForCall[i].insecure
}

func (fake *FakePAAS) LoginReturns(result1 error) {
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) Target(organization string, space string) error {
	fake.targetMutex.Lock()
	fake.targetArgsForCall = append(fake.targetArgsForCall, struct {
		organization string
		space        string
	}{organization, space})
	fake.targetMutex.Unlock()
	if fake.TargetStub != nil {
		return fake.TargetStub(organization, space)
	} else {
		return fake.targetReturns.result1
	}
}

func (fake *FakePAAS) TargetCallCount() int {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	return len(fake.targetArgsForCall)
}

func (fake *FakePAAS) TargetArgsForCall(i int) (string, string) {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	return fake.targetArgsForCall[i].organization, fake.targetArgsForCall[i].space
}

func (fake *FakePAAS) TargetReturns(result1 error) {
	fake.TargetStub = nil
	fake.targetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePAAS) PushApp(manifest string, path string, currentAppName string) error {
	fake.pushAppMutex.Lock()
	fake.pushAppArgsForCall = append(fake.pushAppArgsForCall, struct {
		manifest       string
		path           string
		currentAppName string
	}{manifest, path, currentAppName})
	fake.pushAppMutex.Unlock()
	if fake.PushAppStub != nil {
		return fake.PushAppStub(manifest, path, currentAppName)
	} else {
		return fake.pushAppReturns.result1
	}
}

func (fake *FakePAAS) PushAppCallCount() int {
	fake.pushAppMutex.RLock()
	defer fake.pushAppMutex.RUnlock()
	return len(fake.pushAppArgsForCall)
}

func (fake *FakePAAS) PushAppArgsForCall(i int) (string, string, string) {
	fake.pushAppMutex.RLock()
	defer fake.pushAppMutex.RUnlock()
	return fake.pushAppArgsForCall[i].manifest, fake.pushAppArgsForCall[i].path, fake.pushAppArgsForCall[i].currentAppName
}

func (fake *FakePAAS) PushAppReturns(result1 error) {
	fake.PushAppStub = nil
	fake.pushAppReturns = struct {
		result1 error
	}{result1}
}

var _ out.PAAS = new(FakePAAS)
